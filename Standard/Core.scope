// For now, minimum values cannot be represented by literals
int  INT_MAX  = 2147483647;
int  INT_MIN  = INT_MAX + 1;
long LONG_MAX = 9223372036854775807l;
long LONG_MIN = LONG_MAX + 1l;

/%
A second in microseconds.
%/
long SECOND = 1000000l;

/%
Prints @"str" out into `stdout`.
%/
func void print(string str) {
	extern(str, 0);
}

/%
Prints @"str" + `\n` out into `stdout`.
%/
func void println(string str) {
	extern(str + "\n", 0);
}

/%
@bug: The maximum input size is currently 256.

Takes the input from `stdout`.
%/
func string input() {
	ret extern(1);
}

/%
@bug: Returns 0 if the input isn't valid.

Ascii to int. Converts @"str" into an integer and returns it.
%/
func int atoi(string str) {
	ret extern(str, 2);
}

/%
@unsafe: Scope does not clean up when this function is used. Memory leaks inbound!

Forces the program to exit.
%/
func void exit(int code) {
	ret extern(code, 4);
}

/%
Clears the console. 

This function simply prints `\u001b[2J\u001b[H` which is an ANSI code that 
clears the screen and returns the cursor to 0, 0.
%/
func void clear() {
	print("\u001b[2J\u001b[H");
}

/%
Pauses execution for @"time" microseconds.

Use @"sleep" to pause for seconds.
Use @"SECOND" to get 1 second in microseconds.
%/
func void usleep(long time) {
	extern(time, 11);
}

/%
Pauses execution for @"time" seconds.

Use @"usleep" to pause for microseconds.
%/
func void sleep(float time) {
	float t = time * (float) SECOND;
	extern((long) t, 11);
}