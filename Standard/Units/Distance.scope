utility Units {
	// Metric
	int PICOMETERS = 0;
	int NANOMETERS = 1;
	int MICROMETERS = 2;
	int MILLIMETERS = 3;
	int CENTIMETERS = 4;
	int DECIMETERS = 5;
	int METERS = 6;
	int DECAMETERS = 7;
	int HECTOMETERS = 8;
	int KILOMETERS = 9;
	
	// Imperial
	int POINTS = 10; 
	int PICAS = 11;
	int INCHES = 12;
	int FEET = 13;
	int YARDS = 14;
	int MILES = 15;
	
	double[] IN_METERS = new double[] {
		10d ^ -12d, // pm
		10d ^ -9d, // nm
		10d ^ -6d, // um
		10d ^ -3d, // mm
		10d ^ -2d, // cm
		10d ^ -1d, // dm
		10d ^  0d, // m
		10d ^  1d, // dam
		10d ^  2d, // hm
		10d ^  3d, // km

		0.00035277777777778d, // point
		0.00423333333333333d, // pica
		0.0254d, // inch
		0.3048d, // foot
		0.9144d, // yard
		1609.344d // mile
	};
	
	object DistUnits {
		double value = 0d; // In meters
		
		func double to(int unit) {
			ret value / Units.IN_METERS[unit];
		}
		
		/*func DistUnits and(double dist, int unit) {
			auto me = Units.distance(dist, unit);
			me.value += value;
			ret me;
		}*/
	}
	
	func DistUnits distance(double dist, int unit) {
		auto me = new DistUnits;
		me.value = dist * Units.IN_METERS[unit];
		ret me;
	}
}