/%
@optimized

Returns whether or not @"n" is prime. 
%/
func bool isPrime(long n) {
	// If the number is less than 2, it is not prime
	if (n < 2l) {
		ret false;
	}
	
	// Starting at 2 and while i <= sqrt(n) (or i * i <= n)
	for (long i = 2l, i * i <= n, i += 1l) {
		// If n is divisible by i, than it is not prime
		if (n % i == 0l) {
			ret false;
		}
	}
	
	// If the loop passed without returning, it is a prime
	ret true;
}

/%
@optimized

Returns whether or not @"n" is composite.
In other words, it is just returns the opposite of @"isPrime".
%/
func bool isComposite(long n) {
	// A composite number is just a number that isn't prime
	ret !isPrime(n);
}

/%
Returns an array of all of numbers which evenly divide into @"n" without leaving a remainder.
This is also known as the factors or the divisors of @"n".
%/
func long[] factorsOf(long n) {
	// Create the output array
	long[] out = new long[0];
	
	// This is temporary since we cannot append to arrays yet
	func void append(long arg) {
		long[] temp = out;
		out = new long[temp.length + 1];
		for (int i = 0, i < temp.length, i++) {
			out[i] = temp[i];
		}
		
		out[temp.length] = arg;
	}
	
	// Starting at 1 and while i <= sqrt(n) (or i * i <= n)
	for (long i = 1l, i * i <= n, i += 1l) {
		// If i is divisible by n, it is a factor
		if (n % i == 0l) {
			append(i);
		
			// If n / i is not equal to n, it is also a factor
			// e.g. n = 10, i = 2
			// we append i which is 2, and n / i which is 5
			// we don't reach i = 5 because it is more than sqrt(n)
			if (n / i != i) {
				append(n / i);
			}
		}
	}
	
	ret out;
}

/%
@optimized

Returns the greatest common divisor/factor (a.k.a. GCD, HCD, GCF, HCF) of @"a" and @"b".
%/
func long gcd(long a, long b) {
	if (b == 0l) {
		ret a;
	}
	
	ret gcd(b, a % b);
}

/%
@optimized

Returns the least/lowest common multiple (a.k.a. LCM, SCM) of @"a" and @"b".
%/
func long lcm(long a, long b) {
	// Remember, gcd(a, b) * lcm(a, b) = a * b
	ret a / gcd(a, b) * b;
}