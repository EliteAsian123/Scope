/%
@complexity: O(n)

Returns the @"n"th number of [sequence A000217](https://oeis.org/A000045).
Fibonacci numbers: F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.
%/
func long fibonacciNumbers(long n) {
	// when using repeat, long gets truncated to int
	
	long a = 0l;
	long b = 1l;
	for (long i = 0l, i < n, i += 1l) {
		a += b;
		swap(a, b);
	}
	
	ret a;
}

/%
@complexity: O(1)

Returns the @"n"th number of [sequence A000217](https://oeis.org/A000217).
Triangular numbers: a(n) = binomial(n+1,2) = n*(n+1)/2 = 0 + 1 + 2 + ... + n.
%/
func long triangularNumber(long n) {
	ret n * (n + 1l) / 2l;
}